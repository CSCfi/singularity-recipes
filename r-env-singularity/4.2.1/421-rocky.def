Bootstrap: docker
From: rockylinux:8.5

%labels

# container info
  licensing_info="/usr/licensing.txt" 
  maintainer=Jesse Harrison <jesse.harrison@csc.fi>

%files

# license files
  intel-simplified-software-license.txt /usr/intel-simplified-software-license.txt
  licensing.txt /usr/licensing.txt
  nvidia-nccl-license.txt /usr/nvidia-nccl-license.txt

# OneAPI repo
  oneapi.repo /etc/yum.repos.d

# RStudio Server files
# https://github.com/rocker-org/rocker-versioned

  disable_auth_rserver.conf /etc/rstudio/disable_auth_rserver.conf
  pam-helper.sh /usr/lib/rstudio-server/bin/pam-helper
  userconf.sh /etc/cont-init.d/userconf

# JAGS tar file
# https://sourceforge.net/projects/mcmc-jags/files/
# Set JAGS version under %post to match this file
  JAGS-*.tar.gz /opt/tar/

# HDF5 tar file
# https://www.hdfgroup.org/downloads/hdf5/source-code/
# Set HDF5 version under %post to match this file
  hdf5-*.tar.bz2 /opt/tar

# SAGA tar file
# Get the tarball from:
# https://sourceforge.net/projects/saga-gis/files/SAGA%20-%207/
  saga-*.tar.gz /opt/tar

## S6 supervisor

  s6-*.tar.gz /opt/tar

# installation lists

# libraries
  421-rocky-libs.txt /opt/libreqs.txt

# Python packages
  421-rocky-py.txt /opt/pyreqs.txt

%post

## MAKE PAM-HELPER + USERCONF EXECUTABLE

  cd /usr/lib/rstudio-server/bin && chmod +x pam-helper
  cd /etc/cont-init.d && chmod +x userconf
  cd

# VARIABLES FOR INSTALLATIONS

## Use all available cores for compilation
  export MAKEFLAGS="-j$(nproc)"

# gcc
  export GCC_VERSION=9
  
# Node.js
  export NODEJS_VERSION=14

# R
# build date is yyyy-mm-dd
  export BUILD_DATE=2022-06-29
  export CRAN=${CRAN:-https://cloud.r-project.org/}
  export R_BASEVER=4
  export R_VERSION=4.2.1
  export R_PACKAGE_DIR=/appl/soft/math/r-env/421/421-rpackages

# RStudio Server
  export RSTUDIO_VERSION=2022.02.3-492
  export S6_VERSION=3.0.0.0-1
  export S6_BEHAVIOUR_IF_STAGE2_FAILS=2
  export PATH=/usr/lib/rstudio-server/bin:$PATH
  export PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}

# needed for rgdal
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
  export LD_RUN_PATH=$LD_RUN_PATH:/usr/local/lib
  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib

# Intel OneMKL
  export MKL_VERSION=2022.1.0

# GSL (GNU Scientific Library)
  export GSL_VERSION=2.7

# JAGS
  export JAGS_VERSION=4.3.1

# HDF5
  export HDF5_VERSION=1.12.2

# GIS software versions (GDAL, GEOS, PROJ, SAGA)
  export GDAL_DATA=/usr/share/gdal
  export GDAL_VERSION=3.5.1
  export GEOS_VERSION=3.11.0
  export PROJ_VERSION=9.0.1
  export PROJDATA_VERSION=1.10
  export SAGA_VERSION=8.2.2

# GraphViz
# https://gitlab.com/graphviz/graphviz/-/releases
  export GRAPHVIZ_VERSION=4.0.0

# wxGTK
  export WX_GTK_VERSION=3.1.7

# SQLite
# Example format: 3.34.1 = 3340100
  export SQLITE_VERSION=3390000
  export SQLITE_YEAR=2022

# zlib
  export ZLIB_VERSION=1.2.12

# NetCDF
  export NETCDF_VERSION=4.9.0

# MOFED/MPI
  export MOFED_OS=rhel8.5
  export MOFED_VERSION=5.5-1.0.3.2
  export OPENMPI_VERSION=4.1.2rc2

# NVIDIA installations
  export CUDA_VERSION=11-6
  export NCCL_VERSION=2.11.4-1+cuda11.6
  export CUDNN8_VERSION=8.4.1.50-1.cuda11.6
  export NVIDIA_OS=rhel8

# general
  export CC=gcc
  export LANG=C
  export LC_ALL=C.UTF-8
  export OMPI_CC=gcc
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
  export TERM=xterm
  unset TMPDIR

# INSTALLATIONS

# EPEL repository
  dnf -y install epel-release

# nodejs:13 module repository (for installing v8)
  dnf -y module enable nodejs:13

# gcc 9
  dnf -y install gcc-toolset-${GCC_VERSION}
  source /opt/rh/gcc-toolset-${GCC_VERSION}/enable

# nodejs:14 for v8 installation
#  dnf module -y install nodejs:${NODEJS_VERSION}/common
#  dnf -y module enable nodejs:14

# powertools
  dnf -y install dnf-plugins-core
  dnf config-manager --set-enabled powertools

# upgrade packages
  dnf -y upgrade

# PostgreSQL repository
# https://postgis.net/install/
  dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

# disable default PostgreSQL module
  dnf -qy module disable postgresql

# install PostgreSQL 14
  dnf -y install postgresql14-server \
                 postgresql14-devel  \
                 postgresql14-libs   \
                 postgresql14-contrib
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/pgsql-14/lib/pkgconfig

# install libraries from list
  dnf -y install $(cat /opt/libreqs.txt)

# Intel OneMKL

  dnf -y install intel-oneapi-mkl-${MKL_VERSION}.x86_64
  source /opt/intel/oneapi/setvars.sh intel64

  MKL="-L${MKLROOT}/lib/intel64 \
	-Wl,--no-as-needed	  \
	-lmkl_gf_lp64		  \
	-lmkl_gnu_thread	        \
	-lmkl_core -lgomp	        \
 	-lpthread -lm -ldl"

# wxGTK
  wget https://github.com/wxWidgets/wxWidgets/releases/download/v${WX_GTK_VERSION}/wxWidgets-${WX_GTK_VERSION}.tar.bz2
  tar -xf wxWidgets-${WX_GTK_VERSION}.tar.bz2
  cd wxWidgets-${WX_GTK_VERSION}
  mkdir gtk-build
  cd gtk-build
  ../configure --with-gtk=3
  make && make install
  ldconfig
  cd

# zlib
  wget https://www.zlib.net/fossils/zlib-${ZLIB_VERSION}.tar.gz
  tar -xvzf zlib-${ZLIB_VERSION}.tar.gz
  cd zlib-${ZLIB_VERSION}
  ./configure --libdir=/lib64
  make && make install
  rm -f /lib64/libz.so.1.2.7
  ldconfig
  cd
  rm zlib-${ZLIB_VERSION}.tar.gz

# JDK 17
# https://jdk.java.net/archive/
  wget https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
  tar -zxvf openjdk-17.0.2_linux-x64_bin.tar.gz
  mv jdk-17.0.2/ /usr/local/
  export JAVA_HOME=/usr/local/jdk-17.0.2
  export PATH=$PATH:$JAVA_HOME/bin
  ldconfig
  rm openjdk-17.0.2_linux-x64_bin.tar.gz

# GSL (GNU Scientific Library)
  wget https://mirror.ibcp.fr/pub/gnu/gsl/gsl-${GSL_VERSION}.tar.gz
  tar -zxvf gsl-${GSL_VERSION}.tar.gz
  cd gsl-${GSL_VERSION}
  ./configure
  make && make install
  ldconfig
  cd
  rm gsl-${GSL_VERSION}.tar.gz

# HDF5
  cd /opt/tar && tar -xvjf hdf5-${HDF5_VERSION}.tar.bz2
  cd hdf5-${HDF5_VERSION}
  ./configure --prefix=/usr/local
  make && make install
  cd
  rm /opt/tar/hdf5-${HDF5_VERSION}.tar.bz2

# NetCDF
  wget https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF_VERSION}.tar.gz
  tar -zxvf v${NETCDF_VERSION}.tar.gz
  cd netcdf-c-${NETCDF_VERSION}
  ./configure \
        --with-hdf5=/usr/local
  make && make install
  cd
  rm v${NETCDF_VERSION}.tar.gz

# SQLite
# https://www.sqlite.org/download.html
  wget https://www.sqlite.org/${SQLITE_YEAR}/sqlite-autoconf-${SQLITE_VERSION}.tar.gz
  tar -xvzf sqlite-autoconf-${SQLITE_VERSION}.tar.gz
  cd sqlite-autoconf-${SQLITE_VERSION}
  CFLAGS="-DSQLITE_ENABLE_COLUMN_METADATA=1" ./configure --libdir=/usr/lib64
  make && make install
  ldconfig
  cd
  rm sqlite-autoconf-${SQLITE_VERSION}.tar.gz

# JAGS
  cd /opt/tar && tar -xvzf JAGS-${JAGS_VERSION}.tar.gz
  cd JAGS-${JAGS_VERSION}
  ./configure				\
	--libdir=/usr/local/lib64	\
	--with-blas="$MKL"
  make && make install
  ldconfig
  cd
  rm /opt/tar/JAGS-${JAGS_VERSION}.tar.gz
  
# Clang + LLVM toolset
  dnf -y module install llvm-toolset
  
# CMake
  dnf -y install cmake

# Graphviz
  wget https://gitlab.com/graphviz/graphviz/-/archive/${GRAPHVIZ_VERSION}/graphviz-${GRAPHVIZ_VERSION}.tar.gz
  tar -xvzf graphviz-${GRAPHVIZ_VERSION}.tar.gz
  cd graphviz-${GRAPHVIZ_VERSION}
  ./autogen.sh
  ./configure
  make && make install
  cd
  rm graphviz-${GRAPHVIZ_VERSION}.tar.gz

# R
  wget https://cran.rstudio.com/src/base/R-${R_BASEVER}/R-${R_VERSION}.tar.gz
  tar -xzvf R-${R_VERSION}.tar.gz
  cd R-${R_VERSION}

  ./configure 			\
	--prefix=/usr		\
	--with-blas="$MKL"	\
	--with-lapack		\
	--enable-R-shlib
  make && make install
  R CMD javareconf
  cd
  rm R-${R_VERSION}.tar.gz

# Rstudio Server

  # Set date-locked MRAN snapshot of CRAN (note: lib64 for Rocky/RHEL/CentOS, lib for Ubuntu18)
  if [ -z "$BUILD_DATE" ]; then MRAN=$CRAN; \
  else MRAN=https://cran.microsoft.com/snapshot/${BUILD_DATE}; fi
  echo MRAN=$MRAN >> /etc/environment
  echo "options(repos = c(CRAN='$MRAN'), download.file.method = 'libcurl')" >> /usr/lib64/R/etc/Rprofile.site

  # Add R_LIBS_USER and R_LIBS_SITE to Renviron
  echo "R_LIBS_USER='/usr/lib64/R/library'" >> \
  	/usr/lib64/R/etc/Renviron
  echo "R_LIBS_SITE='${R_PACKAGE_DIR}'" >> \
  	/usr/lib64/R/etc/Renviron	

  # S6 supervisor
  # https://github.com/just-containers/s6-overlay#installation
  tar hzxf /opt/tar/s6-overlay-x86.tar.gz -C / --exclude=usr/bin/execlineb
  tar hzxf /opt/tar/s6-overlay-x86.tar.gz -C /usr ./bin/execlineb && $_clean

  # RStudio Server installation
  RSTUDIO_URL="https://download2.rstudio.org/server/rhel8/x86_64/rstudio-server-rhel-${RSTUDIO_VERSION}-x86_64.rpm"
  wget $RSTUDIO_URL
  yum -y install rstudio-server-rhel-${RSTUDIO_VERSION}-x86_64.rpm
  rm rstudio-server-rhel-${RSTUDIO_VERSION}-x86_64.rpm

  # Symlink pandoc & standard pandoc templates for system-wide use
  ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/bin
  ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/bin
  git clone --recursive --branch ${PANDOC_TEMPLATES_VERSION} https://github.com/jgm/pandoc-templates
  mkdir -p /opt/pandoc/templates
  cp -r pandoc-templates*/* /opt/pandoc/templates && rm -rf pandoc-templates*
  mkdir /root/.pandoc && ln -s /opt/pandoc/templates /root/.pandoc/templates

  # RStudio wants an /etc/R, will populate from $R_HOME/etc
  mkdir -p /etc/R
  echo 'if(is.na(Sys.getenv("HTTR_LOCALHOST", unset=NA))) { options(httr_oob_default = TRUE) }' >> /usr/lib64/R/etc/Rprofile.site
  echo "PATH=${PATH}" >> /usr/lib64/R/etc/Renviron

  # More robust file locking to avoid errors when using shared volumes
  echo 'lock-type=advisory' >> /etc/rstudio/file-locks

  # Texlive + a few R packages for RMarkdown
  dnf -y update && dnf -y install 	\
			pandoc 		\
			texlive 			

  # R packages for RMarkdown

  R --slave -e 'install.packages("tinytex", repos = "https://cran.rstudio.com/")'
  R --slave -e 'tinytex::install_tinytex(force = TRUE)'
  R --slave -e 'install.packages("blogdown", repos = "https://cran.rstudio.com/")'
  R --slave -e 'install.packages("bookdown", repos = "https://cran.rstudio.com/")'
  R --slave -e 'install.packages("rticles", repos = "https://cran.rstudio.com/")'
  R --slave -e 'install.packages("rmdshower", repos = "https://cran.rstudio.com/")'
  R --slave -e 'install.packages("xaringan", repos = "https://cran.rstudio.com/")'

  # Further R packages
  # (Selected packages that ran into errors when installing outside container)

  R --slave -e 'install.packages("vroom", repos = "https://cran.rstudio.com/")'
  R --slave -e 'install.packages("systemfonts", repos = "https://cran.rstudio.com/")'

# locate
  dnf -y install mlocate
  updatedb

# GEOS
# http://download.osgeo.org/geos/
  wget http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2
  tar -xvjf geos-${GEOS_VERSION}.tar.bz2
  cd geos-${GEOS_VERSION}
  ./configure
  make && make install
  ldconfig
  cd

# PROJ
# https://proj.org/download.html#current-release
  wget https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz
  tar -xvzf proj-${PROJ_VERSION}.tar.gz
  cd proj-${PROJ_VERSION}
  mkdir build && cd build
  cmake ..
  cmake --build .
  cmake --build . --target install
  ldconfig
  cd
  rm proj-${PROJ_VERSION}.tar.gz

# projdata
# https://proj.org/download.html#download
  cd /usr/local/share/proj
  wget https://download.osgeo.org/proj/proj-data-${PROJDATA_VERSION}.tar.gz
  tar -xvzf proj-data-${PROJDATA_VERSION}.tar.gz
  rm proj-data-${PROJDATA_VERSION}.tar.gz
  cd

# GDAL
# http://download.osgeo.org/gdal/
  wget http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz
  tar -xvzf gdal-${GDAL_VERSION}.tar.gz
  cd gdal-${GDAL_VERSION}
  ./configure                   \
  --with-proj=/usr/local        \
  --with-hdf5=/usr/local        \
  --with-threads                \
  --with-libtiff=internal	\
  --with-geotiff=internal	\
  --with-jpeg=internal          \
  --with-gif=internal           \
  --with-png=internal           \
  --with-libz=internal
  make && make install
  ldconfig
  cd
  rm gdal-${GDAL_VERSION}.tar.gz

# SAGA
  cd /opt/tar && tar -xvzf saga-${SAGA_VERSION}.tar.gz
  cd saga-${SAGA_VERSION}/saga-gis
  autoreconf -fi
  ./configure                   \
        --libdir=/usr/local/lib64
  make && make install
  ldconfig
  cd
  rm /opt/tar/saga-${SAGA_VERSION}.tar.gz

# Mellanox OFED + OpenMPI installations
  wget https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox
  rpm --import RPM-GPG-KEY-Mellanox
  rm RPM-GPG-KEY-Mellanox

  cd /etc/yum.repos.d/
  wget https://linux.mellanox.com/public/repo/mlnx_ofed/${MOFED_VERSION}/${MOFED_OS}/mellanox_mlnx_ofed.repo
  dnf -y install openmpi-${OPENMPI_VERSION} \
  		     rdma-core 			  \
  		     ucx-ib  			  \
  		     numactl-devel

# Settings for compiling with MPI and CUDA
  export OMPI_DIR=$(ls -1d /usr/mpi/gcc/openmpi-4.* | head -n1)
  export PATH=$OMPI_DIR/bin:$PATH
  export LD_LIBRARY_PATH=$OMPI_DIR/lib64:$LD_LIBRARY_PATH
  export PATH=/usr/local/cuda/bin:$PATH

# NVIDIA + Py package installations

  # CUDA
  cd /etc/yum.repos.d/
  wget https://developer.download.nvidia.com/compute/cuda/repos/${NVIDIA_OS}/x86_64/cuda-${NVIDIA_OS}.repo
  dnf -y install cuda-${CUDA_VERSION}			\
                 libnccl-${NCCL_VERSION} 			\
                 libnccl-devel-${NCCL_VERSION} 		\
                 libnccl-static-${NCCL_VERSION} 	\
      	     libcudnn8-${CUDNN8_VERSION} 		\
      	     libcudnn8-devel-${CUDNN8_VERSION}

  # Settings for compiling with MPI and CUDA
  export OMPI_DIR=$(ls -1d /usr/mpi/gcc/openmpi-4.* | head -n1)
  export PATH=$OMPI_DIR/bin:$PATH
  export LD_LIBRARY_PATH=$OMPI_DIR/lib64:$LD_LIBRARY_PATH
  export PATH=/usr/local/cuda/bin:$PATH
  cd

  # TensorFlow
  pip3 install tensorflow

  # Py packages
  pip3 install -r /opt/pyreqs.txt 

  dnf clean all

%environment

# general
  source /opt/rh/gcc-toolset-9/enable
  export BUILD_DATE=2022-06-29
  export CC=gcc
  export JAVA_HOME=/usr/local/jdk-17.0.2
  export PATH=$PATH:$JAVA_HOME/bin
  export LANG=C
  export LC_ALL=C.UTF-8
  unset MANPATH

  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
  export LD_RUN_PATH=$LD_RUN_PATH:/usr/local/lib
  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib

  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/pgsql-14/lib/pkgconfig

  export PG_INCDIR=/usr/pgsql-14/include
  export PG_LIBDIR=/usr/pgsql-14/lib

# R variables
# Some are Puhti-specific

  export AWS_DEFAULT_REGION=''
  export CRAN=${CRAN:-https://cloud.r-project.org/}
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib:/usr/lib:/usr/local/lib:/usr/lib64

  export PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}
  export PATH=${R_PACKAGE_DIR}/Rmpi:$PATH
  export PATH=${R_PACKAGE_DIR}/snow:$PATH
  export PATH=/usr/lib/rstudio-server/bin:$PATH
  export R_LIBS_SITE=${R_PACKAGE_DIR}
  export R_LIBS_USER=/usr/lib64/R/library
  export TERM=xterm
  export TZ=Europe/Helsinki

# GDAL
  export GDAL_DATA=/usr/share/gdal

# MPI
  export OMPI_CC=gcc
  export OMPI_DIR=$(ls -1d /usr/mpi/gcc/openmpi-4.* | head -n1)
  export PATH=/usr/local/cuda/bin:$OMPI_DIR/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/lib64:$OMPI_DIR/lib64:$LD_LIBRARY_PATH
  export PMIX_MCA_gds=hash
  export SLURM_MPI_TYPE=pmix_v3

# OpenMP
  export OMP_NUM_THREADS=1
  export OMP_AFFINITY_FORMAT="Process %P level %L thread %0.3n affinity %A"
  export OMP_DISPLAY_AFFINITY=true

# NVIDIA
  export CUDA_HOME=/usr/local/cuda
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64/:$LD_LIBRARY_PATH
  export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
  export PATH=/usr/local/cuda/bin:$PATH

# OneMKL
  export CPATH=/opt/intel/oneapi/tbb/2021.6.0/env/../include:/opt/intel/oneapi/mkl/2022.1.0/include
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/intel/oneapi/tbb/2021.6.0/env/../lib/intel64/gcc4.8:/opt/intel/oneapi/mkl/2022.1.0/lib/intel64:/opt/intel/oneapi/compiler/2022.1.0/linux/lib:/opt/intel/oneapi/compiler/2022.1.0/linux/lib/x64:/opt/intel/oneapi/compiler/2022.1.0/linux/compiler/lib/intel64_lin
  export LIBRARY_PATH=$LIBRARY_PATH:/opt/intel/oneapi/tbb/2021.6.0/env/../lib/intel64/gcc4.8:/opt/intel/oneapi/mkl/2022.1.0/lib/intel64:/opt/intel/oneapi/compiler/2022.1.0/linux/compiler/lib/intel64_lin:/opt/intel/oneapi/compiler/2022.1.0/linux/lib
  export MKLROOT=/opt/intel/oneapi/mkl/2022.1.0
  export NLSPATH=/opt/intel/oneapi/mkl/2022.1.0/lib/intel64/locale/%l_%t/%N:/opt/intel/oneapi/compiler/2022.1.0/linux/compiler/lib/intel64_lin/locale/%l_%t/%N
  export PATH=$PATH:/opt/intel/oneapi/mkl/2022.1.0/bin/intel64
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/intel/oneapi/tbb/2021.6.0/env/../lib/pkgconfig:/opt/intel/oneapi/mkl/2022.1.0/lib/pkgconfig:/opt/intel/oneapi/compiler/2022.1.0/lib/pkgconfig

%runscript

  exec /bin/bash R "$@"
  exec /bin/bash /init "$@"

%startscript

  exec /bin/bash R "$@"
  exec /bin/bash /init "$@
