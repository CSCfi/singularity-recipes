Bootstrap: docker
From: rockylinux:8.5

%labels
  Author Mats Sj√∂berg <mats.sjoberg@csc.fi>

%files
  requirements_pytorch_1.12.0.txt /opt/requirements.txt
  csc-mpi-fix.patch /opt/csc-mpi-fix.patch

%post
  # Use all available cores for compilation
  export MAKEFLAGS="-j$(nproc)"

  # Enable powertools
  dnf install -y dnf-plugins-core
  dnf config-manager --set-enabled powertools

  # Upgrade packages to most recent versions
  dnf -y upgrade

  # Install additional packages
  dnf -y install patch python39-devel git wget cmake libsndfile \
      ncurses-devel turbojpeg turbojpeg-devel libxkbcommon-x11 \
      openblas-devel

  # Install newer gcc
  dnf -y install gcc-toolset-9
  source /opt/rh/gcc-toolset-9/enable

  # We need newer nodejs
  dnf module -y install nodejs:14/common

  # Install Mellanox stuff and OpenMPI
  wget https://www.mellanox.com/downloads/ofed/RPM-GPG-KEY-Mellanox
  rpm --import RPM-GPG-KEY-Mellanox
  rm RPM-GPG-KEY-Mellanox

  cd /etc/yum.repos.d/
  # MOFED
  wget https://linux.mellanox.com/public/repo/mlnx_ofed/5.5-1.0.3.2/rhel8.5/mellanox_mlnx_ofed.repo
  #wget https://linux.mellanox.com/public/repo/mlnx_ofed/5.6-1.0.3.3/rhel8.5/mellanox_mlnx_ofed.repo
  # dnf -y install mlnx-ofed-all numactl-devel
  dnf -y install openmpi-4.1.2rc2 rdma-core ucx-ib  numactl-devel

  # Install CUDA, CUDNN, NCCL
  cd /etc/yum.repos.d/
  wget https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo
  # dnf -y install cuda-11-5 \
  #     libnccl-2.11.4-1+cuda11.5 libnccl-devel-2.11.4-1+cuda11.5 libnccl-static-2.11.4-1+cuda11.5 \
  #     libcudnn8-8.3.3.40-1.cuda11.5 libcudnn8-devel-8.3.3.40-1.cuda11.5
  # dnf -y install cuda-11-6 \
  #     libnccl-2.12.12-1+cuda11.6 libnccl-devel-2.12.12-1+cuda11.6 libnccl-static-2.12.12-1+cuda11.6 \
  #     libcudnn8-8.4.1.50-1.cuda11.6 libcudnn8-devel-8.4.1.50-1.cuda11.6
  dnf -y install cuda-11-6 \
      libnccl-2.11.4-1+cuda11.6 libnccl-devel-2.11.4-1+cuda11.6 libnccl-static-2.11.4-1+cuda11.6 \
      libcudnn8-8.4.1.50-1.cuda11.6 libcudnn8-devel-8.4.1.50-1.cuda11.6

  # Settings for compiling stuff with MPI and CUDA
  export OMPI_DIR=$(ls -1d /usr/mpi/gcc/openmpi-4.* | head -n1)
  export PATH=$OMPI_DIR/bin:$PATH
  export LD_LIBRARY_PATH=$OMPI_DIR/lib64:$LD_LIBRARY_PATH
  export PATH=/usr/local/cuda/bin:$PATH

  # Install Python packages, including PyTorch
  pip3 install torch torchvision torchaudio torchtext --extra-index-url https://download.pytorch.org/whl/cu116 \
       -r /opt/requirements.txt

  /usr/local/bin/jupyter lab build

  # Install recent Vim with Python-support
  # It has to be done like this as default vim-enhanced is compiled against python3.6 version
  VIMVER="8.2.4388"
  cd /opt/
  wget https://github.com/vim/vim/archive/refs/tags/v${VIMVER}.tar.gz
  tar xf v${VIMVER}.tar.gz
  cd vim-${VIMVER}
  ./configure --enable-python3interp=yes --prefix=/opt/vim --enable-fail-if-missing
  make && make install
  cd
  rm -rf /opt/vim-${VIMVER} v${VIMVER}.tar.gz

  # Install OpenCV >= 4
  cd /opt/
  OPENCV_VER=4.6.0
  wget https://github.com/opencv/opencv/archive/${OPENCV_VER}.zip
  unzip ${OPENCV_VER}.zip
  cd opencv-${OPENCV_VER}
  mkdir build; cd build
  cmake -DOPENCV_GENERATE_PKGCONFIG=ON ..
  cmake --build .
  make install
  cd
  rm -rf /opt/${OPENCV_VER}.zip /opt/opencv-${OPENCV_VER}
  export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH

  # Install ffcv
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig
  pip3 install ffcv

  # Install DeepSpeed
  pip3 install mpi4py
  TORCH_CUDA_ARCH_LIST="7.0;8.0" \
                      DS_BUILD_OPS=1 DS_BUILD_AIO=0 DS_BUILD_TRANSFORMER_INFERENCE=0 DS_BUILD_FUSED_LAMB=0 \
                      DS_BUILD_SPARSE_ATTN=0 \
                      pip3 install deepspeed
  patch -u /usr/local/lib64/python3.9/site-packages/deepspeed/utils/distributed.py \
        -i /opt/csc-mpi-fix.patch

  # Install Horovod
  HOROVOD_BUILD_CUDA_CC_LIST=70,80 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITHOUT_TENSORFLOW=1 HOROVOD_WITHOUT_MXNET=1 \
                      HOROVOD_WITH_MPI=1 HOROVOD_WITHOUT_GLOO=1 HOROVOD_GPU_OPERATIONS=NCCL \
                      pip3 install -v horovod
  dnf clean all


%environment
  # export SLURM_MPI_TYPE=pmix_v3
  # export PMIX_MCA_gds=hash
  source /opt/rh/gcc-toolset-9/enable

  export OMPI_DIR=$(ls -1d /usr/mpi/gcc/openmpi-4.* | head -n1)
  export PATH=/usr/local/cuda/bin:$OMPI_DIR/bin:/opt/vim/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/lib64:$OMPI_DIR/lib64:$LD_LIBRARY_PATH
